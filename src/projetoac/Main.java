/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetoac;

import com.google.gson.Gson;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ProgressMonitor;
import logic.ProgressUpdateListener;
import logic.Util;
import model.AttackWay;
import model.CVE;

/**
 *
 * @author Elias
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    DefaultListModel model = new DefaultListModel();
    private List<CVE> cves;
    public Main(List<CVE> cves) {
        this.cves = cves;
    }
    public Main() {
        initComponents();
        productsSelectedList.setModel(model);
        cves = new ArrayList<>();
        try {
            vendorCB.setModel(new javax.swing.DefaultComboBoxModel(Util.getVendors().toArray()));
            setListenerVendorCB();
            setListenerProductCB();
            setListenerVersionsCB();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void setListenerVendorCB() {
        vendorCB.addActionListener ((ActionEvent e) -> {
            disableVersions();
            if (vendorCB.getSelectedIndex() == 0) {
                disableProducts();
                addButton.setEnabled(false);
                return;
            }
            productsCB.setEnabled(true);
            productsCB.setSelectedIndex(0);
            try {
                productsCB.setModel(new javax.swing.DefaultComboBoxModel(Util.getProducts(vendorCB.getSelectedItem().toString()).toArray()));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        });
    }
    private void setListenerProductCB() {
        productsCB.addActionListener ((ActionEvent e) -> {
            disableVersions();
            if (productsCB.getSelectedIndex() == 0) {
                addButton.setEnabled(false);
                return;
            }
            versionsCB.setEnabled(true);
            versionsCB.setSelectedIndex(0);
            try {
                versionsCB.setModel(new javax.swing.DefaultComboBoxModel(Util.getCvesByProduct(vendorCB.getSelectedItem().toString(), productsCB.getSelectedItem().toString()).toArray()));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        });
    }
    private void setListenerVersionsCB() {
        versionsCB.addActionListener ((ActionEvent e) -> {
            if (versionsCB.getSelectedIndex() == 0) {
                addButton.setEnabled(false);
                return;
            }
            addButton.setEnabled(true);
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        vendorCB = new javax.swing.JComboBox();
        productsCB = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        versionsCB = new javax.swing.JComboBox();
        addButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productsSelectedList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        removeBtn = new javax.swing.JButton();
        generateReportBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 350));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.gray, java.awt.Color.gray, java.awt.Color.gray, java.awt.Color.gray));

        vendorCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Vendors" }));

        productsCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Products" }));
        productsCB.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Add Products");

        versionsCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Versions" }));
        versionsCB.setEnabled(false);

        addButton.setText("Add");
        addButton.setEnabled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vendorCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(productsCB, 0, 204, Short.MAX_VALUE)
                    .addComponent(versionsCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vendorCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(productsCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(versionsCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addButton)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.gray, java.awt.Color.gray, java.awt.Color.gray, java.awt.Color.gray));

        productsSelectedList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        productsSelectedList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                productsSelectedListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(productsSelectedList);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("List of Selected Products");

        removeBtn.setText("Remove");
        removeBtn.setEnabled(false);
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(removeBtn)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        generateReportBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        generateReportBtn.setText("Generate the report");
        generateReportBtn.setEnabled(false);
        generateReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReportBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("CVE Search");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(generateReportBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateReportBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        CVE cve = getCVE();
        addToCves(cve);
        model.addElement(cve);
        productsSelectedList.setModel(model);
        resetAddProducts();
	generateReportBtn.setEnabled(true);
    }//GEN-LAST:event_addButtonActionPerformed

    public void addToCves(CVE cve) {
        List<CVE> temp = Util.getCves();
        temp.stream().forEach(c -> {
            boolean flag = false;
            for(String cpe : c.getCpe()) {
                if(cve.getSearchedVersion().equals(CVE.getVersion(cpe))){
                    c.setSearchedVersion(cve.getSearchedVersion());
                    flag = true;
                }
            }
            if(flag && !cves.contains(c))
                cves.add(c);
        });
    }

    private CVE getCVE() {
        CVE cve = new CVE(vendorCB.getSelectedItem().toString(), productsCB.getSelectedItem().toString());
        cve.setSearchedVersion(versionsCB.getSelectedItem().toString());
        return  cve;
    }

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        CVE cve = (CVE) productsSelectedList.getSelectedValue();
        List<CVE> aux = (List<CVE>) ((ArrayList<CVE>)cves).clone();
        aux.forEach(item -> {
            if(item.getVendor().equals(cve.getVendor()) && item.getProduct().equals(cve.getProduct()) && item.getSearchedVersion().equals(cve.getSearchedVersion()))
                cves.remove(item);
        });
        model.remove(productsSelectedList.getSelectedIndex());
        if(model.isEmpty())
            generateReportBtn.setEnabled(false);
    }//GEN-LAST:event_removeBtnActionPerformed

    private void productsSelectedListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_productsSelectedListValueChanged
        if (productsSelectedList.getSelectedIndex() != -1) {
            removeBtn.setEnabled(true);
            generateReportBtn.setEnabled(true);
        } else {
            removeBtn.setEnabled(false);
            generateReportBtn.setEnabled(false);
        }
    }//GEN-LAST:event_productsSelectedListValueChanged

    private void generateReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateReportBtnActionPerformed
        generateReport();
    }//GEN-LAST:event_generateReportBtnActionPerformed

    public void generateReport() {
        setEnabled(false);
        
        ProgressMonitor pm = new ProgressMonitor(this.rootPane, "Generating report...", "", 0, cves.size());
        pm.setProgress(0);
        ProgressUpdateListener listener = getProgressMonitorListener(pm);
        Thread thread = new Thread(() -> {
            List<CVE> cveDetails = Util.getCvesDetails(cves, listener);
            if(verifyIfPmIsCanceled(pm))
                return;
            String report = getHtmlHead();
            int i = 0;
            
            pm.setMaximum(cveDetails.size());
            Gson gson = new Gson();
            for(CVE cve : cveDetails) {
                writeToDatabase(cve, gson);
                
                if(verifyIfPmIsCanceled(pm))
                    return;
                pm.setNote("Building: " + (int) (((float) i / cveDetails.size()) * 100f) + "%");
                pm.setProgress(i);
                
                String aux = getHtml(cve, i, report);
                report += aux.isEmpty() ? "" : aux;
                i++;
            }
            report += "</body></html>";
            pm.setNote("Building: 100%");
            pm.setProgress(i);
            
            writeReport(report);
            setEnabled(true);
        });
        thread.start();
    }

    private boolean verifyIfPmIsCanceled(ProgressMonitor pm) {
        if (pm.isCanceled()) {
            pm.close();
            setEnabled(true);
            return true;
        }
        return false;
    }

    private ProgressUpdateListener getProgressMonitorListener(ProgressMonitor pm) {
        ProgressUpdateListener listener = new ProgressUpdateListener() {
            @Override
            public boolean onProgressUpdate(int progress) {
                pm.setNote("Vulnerabilities: " + progress  + "/" + pm.getMaximum());
                pm.setProgress(progress);
                
                return pm.isCanceled();
            }
        };
        return listener;
    }

    private String getHtmlHead() {
        String report = "<!DOCTYPE html><html><head><title>Report</title>"
                + "<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js\"></script>"
                + "<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\" integrity=\"sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7\" crossorigin=\"anonymous\">"
                + "<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js\" integrity=\"sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS\" crossorigin=\"anonymous\"></script>"
                + "</head><body class='container'><h1 align='center'>Report to CISO</h1><br>";
        return report;
    }

    private void writeToDatabase(CVE cve, Gson gson) {
        FileWriter writer;
        if(!Util.haveCveOnJson(cve.getId())) {
            try {
                writer = new FileWriter("database/"+cve.getId()+".json");
                writer.write(gson.toJson(cve));
                writer.close();
            } catch (IOException ex) {}
        }
    }

    private void writeReport(String report) {
        try {
            String date = new SimpleDateFormat("yyyy-MM-dd_HH_mm_ss").format(new Date());
            PrintWriter pwriter = new PrintWriter("report" + date + ".html", "UTF-8");
            pwriter.println(report);
            pwriter.close();
            File htmlFile = new File("report" + date + ".html");
            Desktop.getDesktop().browse(htmlFile.toURI());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String getHtml(CVE cve, int i, String report) {
        String aux = "<br><h3><b>" + cve.getId() + "</b></h3>";
        aux += "<h4><b>Vendor:</b> " + cve.getVendor() + "</h4>";
        aux += "<h4><b>Product:</b>" + cve.getProduct() + "</h4>";
        aux += "<h4><b>Version:</b>" + cve.getSearchedVersion() + "</h4>";
        aux += "<button class=\"btn\" type=\"button\" data-toggle=\"collapse\" data-target=\"#cveDetails"+i+"\" aria-expanded=\"false\" aria-controls=\"collapseExample\">\n" +
                "Show cve details\n" +
                "</button>\n" +
                "<div class=\"collapse\" id=\"cveDetails"+i+"\">\n" +
                "<div class=\"well\">";
        aux += "<b>Impact</b><br>" + (cve.getImpact() == null ? " is not defined for this vulnerability!" : cve.getImpact().toString()) + "<br>";
        aux+="<b>Access</b><br>" + (cve.getAccess()== null ? " is not defined for this vulnerability!" : cve.getAccess().toString()) + "<br>";
        aux += "<b>CVSS: </b>" + cve.getCvss() + "<br>";
        aux += "<b>CWE: </b>" + (cve.getCwe() == null ? " is not defined for this vulnerability!" : cve.getCwe()) + "<br>";
        if (!cve.getAttackWays().isEmpty()) {
            aux += "<h3><b>Attack ways</b><br></h3>";
            aux += "<button class=\"btn\" type=\"button\" data-toggle=\"collapse\" data-target=\"#attackWays"+i+"\" aria-expanded=\"false\" aria-controls=\"collapseExample\">\n" +
                    "Show attack ways\n" +
                    "</button>\n" +
                    "<div class=\"collapse\" id=\"attackWays"+i+"\">\n" +
                    "<div class=\"well\">";
            for(AttackWay aw : cve.getAttackWays()) {
                aux += aw.toString();
                aux += " <hr style='border-color: black;' width=\"50%\" size=\"8\" align=\"center\">";
            }
            aux += "</div></div>";
        }
        if (!cve.getAttackWays().isEmpty()) {
                    aux += "<h3><b>CPEs</b><br></h3>";
                    aux += "<button class=\"btn\" type=\"button\" data-toggle=\"collapse\" data-target=\"#cpe"+i+"\" aria-expanded=\"false\" aria-controls=\"collapseExample\">\n" +
                            "Show attack ways\n" +
                            "</button>\n" +
                            "<div class=\"collapse\" id=\"cpe"+i+"\">\n" +
                            "<div class=\"well\">";
                    aux = cve.getCpe().stream().map((s) -> s + "<br>").reduce(aux, String::concat);
                    aux += "</div></div>";
        }
        aux += "</div></div>";
        aux += " <hr width=\"50%\" size=\"8\" align=\"center\">";
        
        return aux;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        if(args.length != 0) {
            if(!Util.getReport(args[0])) 
                System.out.println("Invalid file");
        } else {
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new Main().setVisible(true);
                }
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton generateReportBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox productsCB;
    private javax.swing.JList productsSelectedList;
    private javax.swing.JButton removeBtn;
    private javax.swing.JComboBox vendorCB;
    private javax.swing.JComboBox versionsCB;
    // End of variables declaration//GEN-END:variables

    private void resetAddProducts() {
        vendorCB.setSelectedIndex(0);
        disableVersions();
        disableProducts();
        addButton.setEnabled(false);
    }

    private void disableVersions() {
        versionsCB.setSelectedIndex(0);
        versionsCB.setEnabled(false);
    }

    private void disableProducts() {
        productsCB.setSelectedIndex(0);
        productsCB.setEnabled(false);
    }
}
